11-1 무결성 제약 조건의 개념

-제약조건의 개념-
  #테이블에 잘못된 데이터가 입력되는것을 방지하기 위해 테이블에서 행이 삽입 갱신 또는 삭제 될 떄마다
  테이블의 데이터에 규칙 적용
  
데이터베이스 레벨에서 선언가능한 제약조건

 # NOT NUL
 # UNIQUE
 # PRIMARY KEY
 # FROEIGN KEY
 # CHECK

-NOT NULL- 제약조건
  #해당 열에 NULL값 생성 방지

  
-UNIQUE 제약 조건(고유 키)-
#UNIQUE 제약 조건이 정의된 열 또는 조합 열이 고유 키
#열 또는 조합열의 값이 고유하게 유지하기위해 지정된 열 또는 조합 열에서 
중복된 값을 가질 수없다
#UNIQUE 제약 조건을 지정한 열에는 NULL 값 허용
#UNIQUE 제약 조건이 정의된 열에 자동으로 UNIQUE 인덱스를 생성


  -PRIMARY KEY 제약조건(기본 키)-
  #제약 조건의 속성 자체는 NOT NULL과 NIQUE
  #테이블당 하나만 생성***중요


  CHECK제약 조건
  #SYSDAT, UID, USER와 같은 함수의 사용이나 CURRVAL,NEXTVAL, LEVEL등의 인사열을 참조하도록
  생성하는 것은 불가능함




  11-2 무결성 제약 조건의 정의 및 사용


  -제약조건의 생성 및 관리-
    
    테이블이 생성 될 떄 생성
    #CREATE TABLE 명령에 포함하여 정의

    테이블이 생성된 후에 추가
    #ALTER TABLE 명령으로 정의
    #모든 제약 조건은 데이터 딕셔너리에 저

    -제약조건의 이름-
    #제약 조건의 이름 지정 형식으로는 테이블_열이름_제약조건유형을 함축적으로 사용하는것이 일반적임


    -기존 테이블에 제약 조건 추가-
    #기존 열에 NOT NULL 제약 조건을 추가하고자 한다면 ALTER TABLE 문의 MODIFY 절을 사용


    -FOREIGN KEY의 추가 옵션-

    외래키 제약 조건에 위해 수행되는 작업을 제한하기 위한 특별한 옵션

    #ON DELETE CASCADE
    #ON DELETE SET NULL


    -제약 조건의 사용-
    #사용자가 수행하는 작업가운데 제약 조건과 관련하여 자주 발생하는 오류
    부모 테이블 : CHILD KEY NOT FOUND
    자식 테이블 : PARENT KEY NOT FOUND


  11-3 제약 조건 관리

      -제약조건의 관리-
      #제약조건의 추가 또는 삭제
      #활성화 또는 비활성화
      #제약조건의 이름 변경



 -제약 조건의 활성화와 비활성화-
#ALTER TABLE 문을 DISABLE/ENABLE 절과 함께 사용
#CASCADE 절을 추가하면 종속 무결성 제약 조건을 함께 비활성화
#UNIQUE 또는 PRIMARY KEY 제약 조건을 비활성화하면 자동으로 생성되던 관련 인덱스가 삭제
#UNIQUE 또는 PRIMARY KEY 제약 조건을 활성화하면 관련 인덱스가 자동으로 다시 생성


-제약 조건의 삭제-
#ALTER TABLE 문을 DROP 절과 함꼐 사용하여 조건을 삭제한다
#CASCADE 옵션을 사용하여 종속 제약 조건을 모두 함꼐 삭제
     


    예제

--고객 등급별 등급이름과 할인율을 저장하고 있는 CUST_GRADE 테이블의 내용을 
  확인  한다. 이 테이블은 CUST_LEVEL 열에 PRIMARY KEY가 정의되어 있다.
    
SELECT * FROM cust_grade;
CREATE TABLE customers
(cust_id NUMBER(6) CONSTRAINT cust_custid_pk PRIMARY KEY,
 cust_name VARCHAR2(40) CONSTRAINT cust_name_nn NOT NULL,  
 phone_no VARCHAR2(15) NOT NULL,
 email VARCHAR2(30),
 birth_date DATE,join_date DATE DEFAULT SYSDATE,  
 cust_level NUMBER(1) DEFAULT 9,
 CONSTRAINT cust_level_fk FOREIGN KEY (cust_level)
 REFERENCES cust_grade(cust_level)
);

--데이터 딕셔너리 USER_CONSTRAINTS로부터 CUSTOMERS 테이블 관련 제약 조건을 참조해 본다.
SELECT constraint_name, constraint_type  
FROM user_constraints
WHERE table_name = 'CUSTOMERS';

--실습에 사용하던 Y_EMP 테이블의 EMP_ID 열과 Y_DEPT 테이블의 DEPT_ID 열에 각각 PRIMARY KEY를 정의한다.
ALTER TABLE y_emp
ADD CONSTRAINT emp_empid_pk PRIMARY KEY(emp_id);  

ALTER TABLE y_dept
ADD CONSTRAINT dept_deptid_pk PRIMARY KEY(dept_id);


--Y_EMP 테이블의 DEPT_ID 열에 Y_DEPT 테이블의 DEPT_ID 열을 참조하는 FOREIGN KEY를 생성한다. 
--근무하던 부서가 삭제되는 경우 해당 부서 사원의 부서번호가 NULL값으로 변경되도록 옵션을 추가한다.
ALTER TABLE y_emp
ADD CONSTRAINT emp_deptid_fk FOREIGN KEY(dept_id)
REFERENCES y_dept(dept_id)
ON DELETE SET NULL;

--Y_EMP 테이블에는 MGR_ID 열이 있다. 특정 사원들의 관리자도 회사의 직원이어야 하므로 동일 테이블의 PRIMARY KEY인 EMPLOYEE_ID 열을 참조하는 외래키를 정의할 수 있다.
ALTER TABLE y_emp
ADD CONSTRAINT emp_mgrid_fk FOREIGN KEY(mgr_id)
REFERENCES y_emp(emp_id);

--Y_EMP 테이블의 SALARY 열에 130보다 작거나 1500보다 많은 급여가 저장될 수 없도록 CHECK 제약조건을 추가한다.
ALTER TABLE y_emp
ADD CONSTRAINT emp_sal_ck CHECK (salary BETWEEN 130 AND 1500);


--Y_EMP 테이블의 EMAIL열에 UNIQUE 제약 조건을 추가하여 중복이 일어나지 않도록  한다.
ALTER TABLE y_emp
ADD CONSTRAINT emp_email_uk UNIQUE(email);


--자식 테이블에서 참조 되는 부모테이블의 행에 UPDATE를 수행한다.
UPDATE y_dept
SET dept_id=1300  WHERE dept_id=200;

--자식 테이블에서 참조 되는 부모테이블의 행을 DELETE 한다.
DELETE FROM y_dept
WHERE dept_id = 300;

-- Y_EMP 테이블에서 DEPT_ID가 300인 행들은 모두 함께 NULL로 변경되었으며 트랜잭션을 ROLLBACK 하자 원래의 값으로 복원된 것을 확인한다.
SELECT emp_id, emp_name, dept_id
FROM y_emp ;
ROLLBACK;
SELECT emp_id, emp_name, dept_id  FROM y_emp ;

-- 자식 테이블에서 참조하는 행을 포함한 부모 테이블에 DROP을 수행하면 다음과 같은 오류가 발생한다.
DROP TABLE y_dept;  

--자식 테이블에서 새 행을 입력하거나 FOREIGN KEY 제약 조건이 정의된 열의 데이터를 변경할 때 부모 테이블에서 참조할 데이터를 발견하지 못하면 다음과 같은 오류가  발생한다.
UPDATE y_emp  SET dept_id = 1300
WHERE emp_id = 2002;

--Y_DEPT 테이블의 PRIMARY KEY 비활성화를 시도한다. 다음 명령은 오류를 반환한다
ALTER TABLE y_dept
DISABLE CONSTRAINT dept_deptid_pk ; 

--이번에는 Y_DEPT 테이블의 PRIMARY KEY를 CASCADE 옵션을 사용하여 비활성화 한다. 
ALTER TABLE y_dept
DISABLE CONSTRAINT dept_deptid_pk CASCADE;

--데이터 딕셔너리 USER_CONSTRAINTS를 조회하여 제약 조건의 상태를 확인한다.
SELECT table_name, constraint_name, status
FROM user_constraints
WHERE table_name IN ('Y_EMP', 'Y_DEPT') ;

--PRIMARY KEY가 비활성화된 상태에서 Y_DEPT 테이블에 잘못된 데이터를 입력해보면  아무 오류 없이 데이터가 저장되는 것을 볼 수 있다.
INSERT INTO y_dept(dept_id, dept_name)  VALUES(200,'서비스');
COMMIT;

--Y_DEPT 테이블의 PRIMARY KEY를 활성화하려고 시도하면 중복되는 데이터가 발견되어 명령문이 실패한다.
ALTER TABLE y_dept ENABLE PRIMARY KEY;  Error 

--잘못된 데이터를 삭제하여 오류를 수정한다. 값이 중복되는 데이터를 삭제하는 경우 ROWID를 활용할 수 있다.
SELECT dept_id, dept_name, rowid  FROM y_dept;
DELETE FROM y_dept
WHERE rowid = 'Your_RowID';
COMMIT;

--Y_DEPT 테이블의 PRIMARY KEY를 다시 활성화 한다. 
ALTER TABLE y_dept ENABLE PRIMARY KEY;

--Y_DEPT 테이블의 PRIMARY KEY 비활성화 시 함께 비활성화된 Y_EMP의 FOREIGN KEY의 상태를 확인해 보고 활성화한다.
SELECT table_name, constraint_name, status FROM USER_CONSTRAINTS
WHERE table_name IN ('Y_EMP','Y_DEPT') ;
ALTER TABLE y_emp ENABLE CONSTRAINT EMP_DEPTID_FK;

--USER_CONSTRAINTS와 같은 데이터 딕셔너리에서 제약 조건의 이름을 확인하고 제약  조건을 삭제해야 한다. 
--Y_EMP 테이블의 PRIMARY KEY를 종속 제약 조건과 함께 삭제 한다.
SELECT constraint_name, r_constraint_name, status  
FROM USER_CONSTRAINTS
WHERE table_name = 'Y_EMP';
ALTER TABLE y_emp DROP PRIMARY KEY CASCADE;
SELECT constraint_name, r_constraint_name, status
FROM USER_CONSTRAINTS
WHERE table_name = 'Y_EMP';

--USER_CONS_COLUMNS의 구조를 표시한다.
DESC user_cons_columns

--Y_EMP 테이블에 제약 조건을 추가한다. 정의된 제약 조건에 대하여 USER_CONSTRAINTS를 조회하여 알아본다.
ALTER TABLE y_emp
ADD PRIMARY KEY(emp_id);  
ALTER TABLE y_emp
ADD FOREIGN KEY(mgr_id) REFERENCES y_emp(emp_id);

--정의된 제약 조건에 대하여 USER_CONSTRAINTS를 조회하여 알아본다. 
SELECT constraint_name, constraint_type
FROM user_constraints
WHERE table_name = 'Y_EMP';

--USER_CONS_COLUMNS를 조회하여 제약 조건이 정의된 열 이름을 알 수 있다.
SELECT constraint_name, column_name
FROM user_cons_columns  WHERE table_name = 'Y_EMP' ;

--USER_CONSTRAINTS와 USER_CONS_COLUMNS를 조인하여 제약조건 관련 정보를 한꺼번에 알아볼 수 있다.
SELECT c.constraint_name, cc.column_name, c.constraint_type  
FROM user_constraints c JOIN user_cons_columns cc
ON (c.constraint_name = cc.constraint_name)  
WHERE c.table_name = 'Y_EMP';






    




    
    
    



    
    

  
  






  
